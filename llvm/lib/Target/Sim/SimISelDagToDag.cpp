#include "MCTargetDesc/SimMCTargetDesc.h"
#include "Sim.h"
#include "SimTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "sim-isel"

namespace {

class SimDAGToDAGISel : public SelectionDAGISel {
  const SimSubtarget *Subtarget = nullptr;

public:
  static char ID;
  SimDAGToDAGISel() = delete;
  explicit SimDAGToDAGISel(SimTargetMachine &tm) : SelectionDAGISel(ID, tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<SimSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

  StringRef getPassName() const override {
    return "Sim DAG->DAG Pattern Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "SimGenDAGISel.inc"
};

} // end anonymous namespace

char SimDAGToDAGISel::ID = 0;

/// This pass converts a legalized DAG into a Sim-specific DAG, ready for
/// instruction scheduling.
FunctionPass *llvm::createSimISelDag(SimTargetMachine &TM) {
  return new SimDAGToDAGISel(TM);
}

void SimDAGToDAGISel::Select(SDNode *Node) {
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }
  SDLoc DL(Node);
  SelectCode(Node);
}
